generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

type WelcomeContent {
  subtitle String
}

type KnowledgePill {
  id          String
  title       String
  description String
}

type KnowledgePills {
  subtitle       String
  knowledgePills KnowledgePill[]
}

type InformativeVideo {
  id    String
  title String
  url   String
}

type InformativeVideos {
  subtitle          String
  informativeVideos InformativeVideo[]
}

type Question {
  id       String
  question String
  answer   String
}

model User {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  documentType     String
  document         String          @unique
  firstName        String
  lastName         String
  phoneNumber      String          @unique
  email            String          @unique
  hashedPassword   String
  role             Role            @default(USER)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  currentChallenge String?
  is2FAEnabled     Boolean         @default(false)
  moreInfo         UserMoreInfo[]
  authenticators   Authenticator[]
  preTest          UserPreTest[]
  postTest         UserPostTest[]
}

model Authenticator {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         Bytes    @unique
  credentialPublicKey  Bytes
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String[]
  userId               String   @db.ObjectId
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserMoreInfo {
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                        String   @db.ObjectId
  gender                        String
  age                           String[]
  civilStatus                   String
  educationLevel                String
  residenceArea                 String
  typeOfHousing                 String
  houseServices                 String[]
  socioeconomicLevel            Int
  numberPeopleContributing      Int
  incomeComeFrom                String
  isInAPensionFund              Boolean
  healthSystemAffiliation       String
  numberPeopleDependFinancially Int
  financialProducts             String[]
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String
  phoneNumber String
  message     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HomeContent {
  id                       String            @id @default(auto()) @map("_id") @db.ObjectId
  welcomeContent           WelcomeContent
  knowledgePillsContent    KnowledgePills
  informativeVideosContent InformativeVideos
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
}

model Meta {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  mision    String[]
  vision    String[]
  whoami    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPreTest {
  id                       String     @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String     @db.ObjectId
  questionsFirstDimension  Question[]
  questionsSecondDimension Question[]
  questionsThirdDimension  Question[]
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPostTest {
  id                       String     @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String     @db.ObjectId
  questionsFirstDimension  Question[]
  questionsSecondDimension Question[]
  questionsThirdDimension  Question[]
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TeamMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId    String   @db.ObjectId
  cc        String   @unique
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id])
}

model Team {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  teamName   String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  TeamMember TeamMember[]
}
